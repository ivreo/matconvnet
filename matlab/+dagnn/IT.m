classdef IT < dagnn.Filter
  properties
    size = [0 0 0 0]
    hasBias = true
    opts = {'cuDNN'}
    inputSize
    iters
%    stepsize
  end

  methods
    function outputs = forward(obj, inputs, params)
      outputs{1} = vl_nnIT( ...
		  inputs{1}, ...
		  params{1}, params{2}, params{3}, ...
		  obj.iters, ...
		  obj.pad, ...
		  obj.stride, ...
		  obj.dilate, ...
		  obj.opts);
    end

    function [derInputs, derParams] = backward(obj, inputs, params, derOutputs, outputs)
	  [derInputs{1}, derParams{1}, derParams{2}, derParams{3}] = ...
		  vl_nnIT_der( ...
		  inputs{1}, outputs{1}, derOutputs{1}(:,:,:,:,end), ...   % derOutputs{1}{end}, ...
		  params{1}, params{2}, params{3}, ...
		  obj.iters, ...
		  obj.pad, ...
		  obj.stride, ...
		  obj.dilate, ...
		  obj.opts);
      
%       % Numerical Differentiation
%       g = @(x) vl_nnIT( ...
% 		  inputs{1}, ...
% 		  x, params{2}, params{3}, ...
% 		  obj.iters(cur_epoch), ...
% 		  obj.pad, ...
% 		  obj.stride, ...
% 		  obj.dilate, ...
% 		  obj.leak, ...
% 		  obj.opts);
%       h = @(x) x{end};
%       [dzdx, dzdx_] = vl_testder(@(x) h(g(x)),params{1},derOutputs{1}{end},derParams{1});
    end

    function kernelSize = getKernelSize(obj)
      kernelSize = obj.size(1:2) ;
    end

    function outputSizes = getOutputSizes(obj, inputSizes)
      outputSizes = getOutputSizes@dagnn.Filter(obj, inputSizes) ;
      outputSizes{1}(3) = obj.size(4) ;
    end

    function params = initParams(obj)
      % Xavier improved
      sc = 0.01;
      %sc = sqrt(2 / prod(obj.size(1:3))) ;
      %sc = sqrt(2 / prod(obj.size([1 2 4]))) ;
      params{1} = randn(obj.size,'single') * sc ;
      if obj.hasBias
        params{2} = zeros(obj.size(4),1,'single') ;
      end
      [~,eigval] = vl_nnPowerMethod( ...
          [], ...
          params{1}, ...
          obj.pad, ...
          obj.stride, ...
          obj.dilate, ...
          obj.inputSize, ...
          obj.opts);
      
      eigvalAmp = 1.05;
      params{3} = 1/(eigvalAmp*eigval) * ones(obj.size(4),1,'single') ;
    end
     
    function set.size(obj, ksize)
      % make sure that ksize has 4 dimensions
      ksize = [ksize(:)' 1 1 1 1] ;
      obj.size = ksize(1:4) ;
    end

    function obj = IT(varargin)
      obj.load(varargin) ;
      % normalize field by implicitly calling setters defined in
      % dagnn.Filter and here
      obj.size = obj.size ;
      obj.iters = obj.iters ;
      obj.stride = obj.stride ;
      obj.pad = obj.pad ;
      obj.inputSize = obj.inputSize;
    end
  end
end
